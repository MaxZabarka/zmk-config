/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            quick-tap-ms = <100>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        hm_layer: hm_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            quick-tap-ms = <100>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
    };

    combos {
        compatible = "zmk,combos";

        jk_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none    &kp Q         &kp W          &kp E  &kp R             &kp T              &kp Y             &kp U              &kp I      &kp O    &kp P                 &none
&kp TAB  &hml LCTRL A  &hm_layer 4 S  &kp D  &kp F             &hml LEFT_ALT G    &hmr RIGHT_ALT H  &kp J              &kp K      &kp L    &hmr RCTRL SEMICOLON  &none
&none    &kp Z         &kp X          &kp C  &hml LEFT_META V  &kp B              &kp N             &hmr RIGHT_META M  &kp COMMA  &kp DOT  &none                 &none
                                      &none  &kp LEFT_SHIFT    &kp SPACE          &kp RET           &mo 2              &none
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans  &trans
                                        &kp LGUI      &trans        &kp SPACE       &kp RET   &trans    &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &kp PLUS       &kp LS(LT)     &kp LS(GT)    &kp LS(DQT)        &kp LS(QMARK)    &kp LS(AMPS)   &kp GRAVE              &kp LBKT       &kp RBKT      &kp LS(PRCNT)  &trans
&trans  &kp LS(EXCL)   &kp MINUS      &kp APOS      &kp DOUBLE_QUOTES  &kp SLASH        &kp LS(PIPE)   &kp LS(COLON)          &kp LS(LPAR)   &kp LS(RPAR)  &kp LS(UNDER)  &trans
&trans  &kp LS(CARET)  &kp LS(POUND)  &kp ASTERISK  &kp PIPE           &kp DOLLAR       &kp LS(TILDE)  &kp LS(DOUBLE_QUOTES)  &kp LS(LBRC)   &kp LS(RBRC)  &kp LS(AT)     &trans
                                      &trans        &kp SPACE          &trans           &kp RET        &none                  &kp BACKSPACE
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &bt BT_CLR_ALL
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &none
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp FSLH      &kp N7    &kp N8  &kp N9  &kp MINUS     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LS(STAR)  &kp N4    &kp N5  &kp N6  &kp LS(PLUS)  &kp EQUAL
&trans  &trans  &trans  &trans  &trans  &trans    &kp COMMA     &kp N1    &kp N2  &kp N3  &kp DOT       &trans
                        &trans  &trans  &trans    &kp LS(STAR)  &kp BSPC  &kp N0
            >;
        };
    };
};
